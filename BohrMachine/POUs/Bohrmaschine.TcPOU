<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="Bohrmaschine" Id="{9e061517-3285-4418-b8f4-b3a23dd6952d}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'c++_compatible'}
FUNCTION_BLOCK Bohrmaschine EXTENDS TcBaseModuleRegistered IMPLEMENTS I_Bohrmaschine
VAR
	fbLogger: MachineLogger;
	ipLogger: I_MachineLogger;
	bohrer: Bohrkopf;
	axesManager: AxesManager;

	// Zustand der Maschine
	eZustand AT %Q*: E_STATES_BOHRMACHINE := E_STATES_BOHRMACHINE.eWaiting;

	// anzufahrende Punkte
	aPunkte: ARRAY [0..3] OF ST_2DPoint;
	nCurIdx: USINT := 0;
	
	// Hilfsvariablen Visualisierung
	nProgressStep: USINT := 0;

	bRunning: BOOL := FALSE;
	stHomePoint: ST_2DPoint := (x := 0, y := 0);
	
	stConfig: ST_Config;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
axesManager();
bohrer();

CASE eZustand OF
	E_STATES_BOHRMACHINE.eWaiting:
		// idle
		
	E_STATES_BOHRMACHINE.ESTARTING:
		Starting();
		
	E_STATES_BOHRMACHINE.eStopped:
		// idle

	E_STATES_BOHRMACHINE.eStopping:
		Stopping();

	E_STATES_BOHRMACHINE.eMoving:
		Moving();

	E_STATES_BOHRMACHINE.eDrilling:
		Drilling();
END_CASE]]></ST>
    </Implementation>
    <Property Name="Config" Id="{63061acf-7c75-4493-a0af-74a14e92f78e}">
      <Declaration><![CDATA[PROPERTY PUBLIC Config : ST_Config]]></Declaration>
      <Get Name="Get" Id="{7480d17d-142c-4da2-815e-194c385f3d0a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{22a7f847-2e66-4376-a116-a521d53586be}">
        <Declaration><![CDATA[VAR
	rBreite: LREAL;
	rLaenge: LREAL;
	rAbstand: LREAL := 10;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.stConfig := Config;

rBreite := stConfig.rBreite;
rLaenge := stConfig.rLaenge;

// Punkt 1
aPunkte[0].x := rAbstand;
aPunkte[0].y := rAbstand;

// Punkt 2
aPunkte[1].x := 10;
aPunkte[1].y := rBreite - rAbstand;

// Punkt 3
aPunkte[2].x := rLaenge - rAbstand;
aPunkte[2].y := rBreite - rAbstand;

// Punkt 4
aPunkte[3].x := rLaenge - rAbstand;
aPunkte[3].y := rAbstand;

bohrer.Config REF= stConfig;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Drill" Id="{f6a05a08-ae6b-4538-9167-85cc33480e82}">
      <Declaration><![CDATA[METHOD PRIVATE Drill : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eZustand := E_STATES_BOHRMACHINE.eDrilling;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Drilling" Id="{de0fd246-a5eb-4e47-9ece-8ff9cbdbcce5}">
      <Declaration><![CDATA[METHOD PRIVATE Drilling : BOOL
VAR_INPUT
END_VAR
VAR
	bGebohrt: BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Bohren
bohrer.Bohren(bDone => bGebohrt);
IF(bGebohrt) THEN
	// Progressbar + 1
	GVL_Control.nProgress := GVL_Control.nProgress + 1;
	ipLogger.LogBohrung(axesManager.CurrentPoint);

	MoveNext();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{569839ac-b2c8-458b-9846-878f4c2b49cc}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	sObjectName: STRING;
	//ipLogger: I_MachineLogger;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//THIS^.ipLogger := ipLogger;
//SUPER^.FB_init(bInitRetains, bInCopyCode, sObjectName);
THIS^.ipLogger := THIS^.fbLogger;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_reinit" Id="{3a40869c-208c-46bd-aff5-834ebb83439d}">
      <Declaration><![CDATA[METHOD FB_reinit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_reinit();]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveNext" Id="{cd40f332-95bc-4193-ac41-7e2ebbe98ced}">
      <Declaration><![CDATA[METHOD PRIVATE MoveNext : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Nächsten Anfahrtspunkt setzen. Bohrloch oder Home.

// Wenn alle Bohrlöcher abgefahren wurden -> go Home / stop
IF nCurIdx > 3 THEN
	Stop();
ELSE // nächsten Bohrpunkt setzen
	axesManager.Start(aPunkte[nCurIdx]);
	nCurIdx := nCurIdx + 1;	
	eZustand := E_STATES_BOHRMACHINE.eMoving;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Moving" Id="{62a2e616-9837-49bd-a407-f2e14bff6ecb}">
      <Declaration><![CDATA[METHOD PRIVATE Moving : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF axesManager.bPunktAngefahren THEN
	F_Log('Moved To:');
	axesManager.LogAxes();
	axesManager.Stop();
	// Progressbar + 1
	GVL_Control.nProgress := GVL_Control.nProgress + 1;
	
	ipLogger.LogPunktAngefahren(axesManager.CurrentPoint);
	// Achsenbewegungen abgeschlossen, Drill
	Drill();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{77e5359d-b759-40cf-a154-1c37eaa6ebbf}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
METHOD PUBLIC Start : HRESULT
VAR_INPUT
	config: REFERENCE TO ST_Config;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eZustand OF
	E_STATES_BOHRMACHINE.EWAITING:
		THIS^.Config := config;
		F_Log('BOHRMASCHINE.Start[eWaiting] called');
		eZustand := E_STATES_BOHRMACHINE.ESTARTING;
		Start := S_PENDING;
		
	E_STATES_BOHRMACHINE.ESTOPPED:
		// fertig
		eZustand := E_STATES_BOHRMACHINE.EWAITING;
		Start := S_OK;
		
	ELSE
		Start := S_PENDING;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Starting" Id="{dd1682f8-6ad8-4d40-87ea-0ffe7a352adb}">
      <Declaration><![CDATA[METHOD Starting : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_Log('start');
// starten
THIS^.bRunning := TRUE;
GVL_Control.bIsRunning := TRUE;
// Progressbar = 0
GVL_Control.nProgress := 0;
axesManager.Enable(bEnableAxes := TRUE);
ipLogger.LogStart();
MoveNext();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop" Id="{c65ecb49-f392-471e-8cd2-32ba1727ca52}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
METHOD PUBLIC Stop : HRESULT]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eZustand OF
	E_STATES_BOHRMACHINE.ESTOPPING:
		Stop := S_PENDING;
		
	E_STATES_BOHRMACHINE.EWAITING:
		Stop := S_OK;
		
	E_STATES_BOHRMACHINE.ESTOPPED:
		eZustand := E_STATES_BOHRMACHINE.EWAITING;
		Stop := S_OK;
	
ELSE
	// wenn intern durch Ende gestoppt wurde, benötigt es keinen Stop von aussen
	IF THIS^.bRunning = FALSE THEN
		RETURN;
	END_IF
	
	THIS^.bRunning := FALSE;
	GVL_Control.bRun := FALSE;
	//axesManager.Stop();
	bohrer.Stop();
	eZustand := E_STATES_BOHRMACHINE.eStopping;
	nCurIdx := 0;
	
	Stop := S_PENDING;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopping" Id="{70e2eab1-d929-470f-b1c1-4867fe667962}">
      <Declaration><![CDATA[METHOD PRIVATE Stopping : BOOL
VAR
	bBohrerStopped: BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Warten bis der Bohrkopf oben ist, dann zum Nullpunkt fahren
bohrer.Stopping(bDone => bBohrerStopped);
IF bBohrerStopped THEN
	F_Log('Fahre Home');
	axesManager.Start(stHomePoint);
END_IF

IF axesManager.bPunktAngefahren THEN
	F_Log('Home:');
	axesManager.LogAxes();
	axesManager.Stop();
	eZustand := E_STATES_BOHRMACHINE.eStopped;
	GVL_Control.bIsRunning := FALSE;
	// Progressbar + 1
	GVL_Control.nProgress := 9;
	ipLogger.LogStop();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcQueryInterface" Id="{92961429-06ba-466c-a94e-380f944104d5}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
METHOD TcQueryInterface : HRESULT
VAR_INPUT
	iid	: REFERENCE TO IID;
	pipItf	: POINTER TO PVOID;
END_VAR
VAR
	ipBM: I_Bohrmaschine;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GuidsEqual(ADR(iid), ADR(TC_GLOBAL_IID_LIST.IID_I_Bohrmaschine)) THEN
	ipBM := THIS^;
	pipItf^ := ITCUNKNOWN_TO_PVOID(ipBM);
	TcAddRef();
	TcQueryInterface := S_OK;
ELSE
	TcQueryInterface := SUPER^.TcQueryInterface(iid, pipItf);
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="Bohrmaschine">
      <LineId Id="331" Count="4" />
      <LineId Id="338" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="399" Count="2" />
      <LineId Id="373" Count="2" />
      <LineId Id="339" Count="8" />
      <LineId Id="43" Count="0" />
    </LineIds>
    <LineIds Name="Bohrmaschine.Config.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Bohrmaschine.Config.Set">
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="16" />
      <LineId Id="2" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="Bohrmaschine.Drill">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="Bohrmaschine.Drilling">
      <LineId Id="13" Count="0" />
      <LineId Id="6" Count="1" />
      <LineId Id="23" Count="1" />
      <LineId Id="30" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="Bohrmaschine.FB_init">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
    </LineIds>
    <LineIds Name="Bohrmaschine.FB_reinit">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Bohrmaschine.MoveNext">
      <LineId Id="29" Count="4" />
      <LineId Id="35" Count="4" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="Bohrmaschine.Moving">
      <LineId Id="18" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="Bohrmaschine.Start">
      <LineId Id="47" Count="1" />
      <LineId Id="77" Count="1" />
      <LineId Id="67" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="51" Count="7" />
      <LineId Id="49" Count="0" />
      <LineId Id="44" Count="0" />
    </LineIds>
    <LineIds Name="Bohrmaschine.Starting">
      <LineId Id="6" Count="5" />
      <LineId Id="14" Count="3" />
    </LineIds>
    <LineIds Name="Bohrmaschine.Stop">
      <LineId Id="39" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="57" Count="3" />
      <LineId Id="63" Count="3" />
      <LineId Id="32" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="43" Count="9" />
      <LineId Id="41" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="55" Count="0" />
    </LineIds>
    <LineIds Name="Bohrmaschine.Stopping">
      <LineId Id="9" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="42" Count="2" />
      <LineId Id="48" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="Bohrmaschine.TcQueryInterface">
      <LineId Id="14" Count="6" />
      <LineId Id="13" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>