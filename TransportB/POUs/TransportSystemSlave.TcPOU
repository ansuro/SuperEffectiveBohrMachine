<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="TransportSystemSlave" Id="{0da10745-a5b5-4172-8fc3-cd4b7c709a8e}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'c++_compatible'}
FUNCTION_BLOCK TransportSystemSlave EXTENDS TcBaseModuleRegistered IMPLEMENTS I_TransportSlave
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
(*
Naive Implementierung um MC_GearInVelo / GearOut nachzubilden.
*)

	// ==== Motion Control ====
	axisTransportB: AXIS_REF;		// Slave
	fbMc_Power: MC_Power;			// Power
	fbMc_Halt: MC_Halt;				// Halt
	fbMc_MoveVelocity: MC_MoveVelocity; // continuous motion
	
	// ==== Inputs =====
	rMasterVelocity AT %I*: LREAL;	// Master velocity
	
	// ==== States ====
	eZustand AT %Q*: E_STATES_TRANSPORT_B := E_STATES_TRANSPORT_B.eHalted;	// aktueller Zustand
	bReady: BOOL := FALSE;			// Achse bereit?
	
	// ==== Objects ====
	fbSensor: Sensor;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// ==== Object updates =====
fbSensor();

// ==== Inputs ====
axisTransportB.ReadStatus();

// ==== Statemachine ====
CASE eZustand OF
	E_STATES_TRANSPORT_B.eHalting:
		THIS^.Halting();

	E_STATES_TRANSPORT_B.eHalted:
		// idle

	E_STATES_TRANSPORT_B.eSyncing:
		THIS^.Syncing();

	E_STATES_TRANSPORT_B.eSynced:
		// idle
END_CASE]]></ST>
    </Implementation>
    <Method Name="FB_reinit" Id="{ca8ee805-4052-4df1-b645-2aab0bad467b}">
      <Declaration><![CDATA[METHOD FB_reinit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_reinit();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Halt" Id="{858be294-6224-4fde-96ad-4f14d61a50e4}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
(* Anhalten *)
METHOD Halt : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eZustand OF
	E_STATES_TRANSPORT_B.EHALTED:
		Halt := S_OK;
		
	E_STATES_TRANSPORT_B.EHALTING:
		Halt := S_PENDING;
		
	ELSE
		THIS^.eZustand := E_STATES_TRANSPORT_B.eHalting;
		Halt := S_PENDING;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Halting" Id="{feb501d8-84d5-4d4b-b138-4e7a9413def2}">
      <Declaration><![CDATA[METHOD PRIVATE Halting : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbMc_MoveVelocity(
	Axis := axisTransportB,
	Execute := FALSE
);

fbMc_Halt(
	Axis := axisTransportB,
	Execute := TRUE
);

IF fbMc_Halt.Done THEN
	fbMc_Halt(
		Axis := axisTransportB,
		Execute := FALSE
	);
	THIS^.eZustand := E_STATES_TRANSPORT_B.eHalted;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Syncing" Id="{e602a99a-a939-4d6d-ac86-55f184baaff5}">
      <Declaration><![CDATA[METHOD PRIVATE Syncing : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Achse starten und wenn Sie bereit ist, auf Master-Geschwindigkeit ziehen
// MC_POWER -> MC_MoveVelocity

// TODO jeden Baustein auf Fehler prüfen, evtl allgemeinen Zustand Error einführen

// Achse ist nicht bereit (nicht mit MC_Power freigegeben)
IF NOT bReady THEN
	fbMc_Power(
		Axis := axisTransportB,
		Enable := TRUE,
		Enable_Positive := TRUE,
		Status => bReady
	);
ELSE // Achse ist bereit und beschleunigt auf Zielgeschwindigkeit
	fbMc_MoveVelocity(
		Execute := TRUE,
		Axis := axisTransportB,
		Direction := MC_Direction.MC_Positive_Direction,
		Velocity := rMasterVelocity
	);

	// Achse hat Zielgeschwindigkeit erreicht => Zustand: Synced
	IF fbMc_MoveVelocity.InVelocity THEN
		THIS^.eZustand := E_STATES_TRANSPORT_B.eSynced;
	END_IF	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SyncWithMaster" Id="{ca67a40d-038f-433c-97d3-099d74d3da29}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
(* Passe dich der Master-Geschwindigkeit an *)
METHOD SyncWithMaster : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eZustand OF
	E_STATES_TRANSPORT_B.ESYNCED:
		SyncWithMaster := S_OK;
		
	E_STATES_TRANSPORT_B.ESYNCING:
		SyncWithMaster := S_PENDING;
	
	ELSE
		THIS^.eZustand := E_STATES_TRANSPORT_B.eSyncing;
		SyncWithMaster := S_PENDING;	
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcQueryInterface" Id="{1775d457-38d0-47c4-ba06-fc0da9d2dbd4}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
METHOD TcQueryInterface : HRESULT
VAR_INPUT
	iid	: REFERENCE TO IID;
	pipItf	: POINTER TO PVOID;
END_VAR
VAR
	ipTPS: I_TransportSlave;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GuidsEqual(ADR(iid), ADR(TC_GLOBAL_IID_LIST.IID_I_TransportSlave)) THEN
	ipTPS := THIS^;
	pipItf^ := ITCUNKNOWN_TO_PVOID(ipTPS);
	TcAddRef();
	TcQueryInterface := S_OK;
ELSE
	TcQueryInterface := SUPER^.TcQueryInterface(iid, pipItf);
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TransportSystemSlave">
      <LineId Id="95" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="55" Count="4" />
      <LineId Id="63" Count="0" />
      <LineId Id="60" Count="2" />
      <LineId Id="54" Count="0" />
    </LineIds>
    <LineIds Name="TransportSystemSlave.FB_reinit">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TransportSystemSlave.Halt">
      <LineId Id="18" Count="1" />
      <LineId Id="21" Count="7" />
      <LineId Id="20" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="TransportSystemSlave.Halting">
      <LineId Id="11" Count="2" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="6" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="TransportSystemSlave.Syncing">
      <LineId Id="6" Count="24" />
      <LineId Id="5" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="TransportSystemSlave.SyncWithMaster">
      <LineId Id="20" Count="1" />
      <LineId Id="23" Count="5" />
      <LineId Id="30" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="TransportSystemSlave.TcQueryInterface">
      <LineId Id="13" Count="0" />
      <LineId Id="20" Count="3" />
      <LineId Id="16" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>